#include <bits/stdc++.h>

using namespace std;

#define UNVISITED -1
#define VISITED 1

typedef pair<int, int> ii;
typedef vector<int> vi;

int N;
ii vet[50005];
vector<vi> AdjList;
vi dfs_num, dfs_low, S, visited;
int dfsNumberCount, numSCC;

double dist(ii a, ii b){
  return sqrt(pow(b.first - a.first, 2) + pow(b.second - a.second, 2));
}

for (int i = 0; i < pts.size(); i++){
  for (int j = 0; j < deltas.size(); j++) {
    pair<int, int> new_point(pts.first + deltas[j].first, pts.second + deltas[j].second);
    auto it_pair = pts.equal_range(pts.begin(), pts.end(), new_point)
      if (it_pair.first != it_pair.second){
	edges.push_back(make_pair(i, it_pair.first - pts.begin());
    }
  }
}
      
int main(){
  while(scanf("%d", &N) != EOF){
    AdjList.assign(N, vi());
    for(int i = 0; i < N; i++){
      int x, y; cin >> x >> y;
      vet[i].first = x; vet[i].second = y;
    }
    for(int i = 0; i < N; i++){
      for(int j = 0; j < N; j++){
	//if(i = j) continue;
	double x = dist(vet[i], vet[j]);
	if(x > 5.0){
	  printf("%d E %d ESTAO NA MESMA GALAXIA\n", i + 1, j + 1);
	  AdjList[i].push_back(j);
	  AdjList[j].push_back(i);
	}else{
	  printf("%d E %d ESTAO EM GALAXIAS DIFERENTES\n", i + 1, j + 1);
	  AdjList[i].push_back(j);
	}
      }
    }
  }
  return 0;
}
