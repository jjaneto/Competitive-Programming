#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <string.h>
#include <queue>
#include <bitset>

#define MAX_V 105
#define INF 1000000000

using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;

int N, Q;
int res[MAX_V][MAX_V], mf, f, s, t;
vi p;
vector<vi> AdjList;

void augment(int v, int minEdge) {     // traverse BFS spanning tree from s to t
  if (v == s){
    f = minEdge; 
    return; 
  }else if(p[v] != -1){
    augment(p[v], min(minEdge, res[p[v]][v])); // recursive
    res[p[v]][v] -= f; 
    res[v][p[v]] += f;
  }       // update
}

/*
3 4
1 1
2 2 3
0
1 3
3 2 1 3
2 1 2
2 3 2
*/


int main(){
  while(scanf("%d %d", &N, &Q) != EOF){
    AdjList.assign(N*N + 2, vi());
    int qtd[N+1];
    memset(res, 0, sizeof res);
    memset(qtd, 0, sizeof qtd);
    s = N*N; t = N*N + 1;
    for(int i = 0; i <= N; i++){
      AdjList[s].push_back(i);
      res[s][i] = 1;
    }
    for(int x = 0; x < N; x++){
      int p; cin >> p;
      qtd[0] += N - p;
      printf("somei %d 0's\n", N - p);
      for(int j = 0; j < p; j++){
	int anti; cin >> anti;
	qtd[anti]++;
      }
    }
    printf("teve %d 0's nessa doideira\n", qtd[0]);
    printf("teve %d 1's nessa doideira\n", qtd[1]);
    printf("teve %d 2's nessa doideira\n", qtd[2]);
    printf("teve %d 3's nessa doideira\n", qtd[3]);
    int qtd_anti; cin >> qtd_anti;
    for(int j = 0; j < qtd_anti; j++){
      int x; cin >> x;
      printf("li %d e sua qtd eh %d\n", x, qtd[x]);
      printf("N + x + 1 eh %d\n", N + x + 1);
      //a ligacao dos 0's
      AdjList[0].push_back(N + x + 1);
      AdjList[N + x + 1].push_back(0);

      res[0][N + x + 1] += qtd[0];
      res[N + x + 1][0] += qtd[0];
      //
      //u, v e v, u
      AdjList[x].push_back(N + x + 1);
      AdjList[N + x + 1].push_back(x);
      
      res[x][N + x + 1] += qtd[x];
      res[N + x + 1][x] += qtd[x];
      //v, t
      AdjList[N + x + 1].push_back(t);
      res[N + x + 1][t] = 1;
    }
    AdjList[0].push_back(N + 1);
    AdjList[N + 1].push_back(0);
    res[0][N + 1] = qtd[0];
    res[N + 1][0] = qtd[0];
    mf = 0;
    while (1) {
      f = 0;
      bitset<MAX_V> vis; vis[s] = true; 
      queue<int> q; q.push(s);
      p.assign(MAX_V, -1);
      while (!q.empty()) {
	int u = q.front(); q.pop();
	//  printf("u eh %d\n", u);
	if (u == t) break;
	for (int j = 0; j < (int)AdjList[u].size(); j++) { 
	  int v = AdjList[u][j];
	  if (res[u][v] > 0 && !vis[v])
	    vis[v] = true, q.push(v), p[v] = u;
	}
      }
      augment(t, INF);
      if (f == 0) break;
      mf += f;
    }
    printf("%d\n", mf);
  }
  return 0;
}
